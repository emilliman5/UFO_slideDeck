100000*40
(100000*40)*0.04
2500000*0.04
39*0.02*12
(39*0.02*12)/399
(49.40711+54.118)*.02
((49.40711+54.118)*.02)*12
sessionInfo()
library(XML)
library(RCurl)
theurl<-"http://www.nuforc.org/webreports/ndxevent.html"
ufos <- getURL(thurl)
ufos <- htmlParse(ufos, encoding = "UTF-8")
titles  <- xpathSApply (ufos ,"//loc",xmlValue)
install.packages("RCurl")
library(XML)
library(RCurl)
theurl<-"http://www.nuforc.org/webreports/ndxevent.html"
ufos <- getURL(thurl)
ufos <- htmlParse(ufos, encoding = "UTF-8")
titles  <- xpathSApply (ufos ,"//loc",xmlValue)
theurl<-"http://www.nuforc.org/webreports/ndxevent.html"
ufos <- getURL(thurl)
library(RCurl)
install.packages("RCurl")
library(RCurl)
theurl<-"http://www.nuforc.org/webreports/ndxevent.html"
ufos <- getURL(thurl)
ufos <- getURL(theurl)
ufos <- htmlParse(ufos, encoding = "UTF-8")
titles  <- xpathSApply (ufos ,"//loc",xmlValue)
head(title)
ufos
titles  <- xpathSApply (ufos ,"//a[@href]",xmlValue)
titles
titles  <- xpathSApply (ufos ,"//a",xmlValue)
titles
install.packages
install.packages("ggmap")
library(ggmap)
geocode("Traverse City", output = "latlon")
geocode("Traverse City, MI", output = "latlon")
geocode("Hendersonville", output = "latlon")
geocode("Bay City", output = "latlon")
geocode("Memphis", output = "latlon")
geocode("Memphis, Egypt", output = "latlon")
geocode("Memphis Egypt", output = "latlon")
?geocode
geocodeQueryCheck()
geocodeQueryCheck()
4190*12
install(c("devtools","ggplot2","lubridate","shiny","fields","ggmap","dplyr","XML","RCurl","json","http","parallel","reshape2","maps","mapproj"))
install.packages(c("devtools","ggplot2","lubridate","shiny","fields","ggmap","dplyr","XML","RCurl","json","http","parallel","reshape2","maps","mapproj"))
library(shiny)
author('UFO_slideDeck')
library(slidify)
author('UFO_slideDeck')
shiny::runApp('~/DataProducts')
slidify("index.Rmd")
read.csv("~/DataProducts/UFO_aggregate_sightings.txt")
a<-read.csv("~/DataProducts/UFO_sightings.txt")
library(lubridate)
plot(aggregate(sightings[u,2],by = list(year(sightings[u,"Date"])), length))
sightings<-read.csv("~/DataProducts/UFO_sightings.txt")
plot(aggregate(sightings[u,2],by = list(year(sightings[u,"Date"])), length))
plot(aggregate(sightings[,2],by = list(year(sightings[,"Date"])), length))
plot(aggregate(sightings[,2],by = list(year(sightings[,"Date"])), length)/365)
plot(aggregate(sightings[,2],by = list(year(sightings[,"Date"])), length))
library(ggplot2)
qplot(aggregate(sightings[,2],by = list(year(sightings[,"Date"])), length))
plot(aggregate(sightings[,2],by = list(year(sightings[,"Date"])), length))
plot(aggregate(sightings[,2],by = list(year(sightings[,"Date"])), length), type="b","pch=19",col="blue", xlab="Date (Year)", ylab="Number of Reported Sightings")
```
plot(aggregate(sightings[,2],by = list(year(sightings[,"Date"])), length), type="b","pch=19",col="blue", xlab="Date (Year)", ylab="Number of Reported Sightings")
plot(aggregate(sightings[,2],by = list(year(sightings[,"Date"])), length),"pch=19",col="blue", xlab="Date (Year)", ylab="Number of Reported Sightings")
plot(aggregate(sightings[,2],by = list(year(sightings[,"Date"])), length), type="b",pch=19,col="blue", xlab="Date (Year)", ylab="Number of Reported Sightings")
obs.summary<-read.csv("../DataProducts/UFO_aggregate_sightings.txt")
obs.summary[is.na(obs.summary$long),]
obs.summary<-read.csv("../DataProducts/UFO_aggregate_sightings.txt")
map('usa')
map("state", col="black",fill=F, add=T, lty=1, lwd=0.5)
map.grid(nx = 5, ny=5 ,labels = F)
map.axes()
map.cities(us.cities,minpop = 500000, cex=1, pch=19, col="blue",label = T, cex.lab=0.75)
brks <- with(obs.summary, seq(min(freq), max(freq), length.out = 11))
grps<-with(obs.summary, cut(freq, breaks=brks, include.lowest = T))
tmp$col<-with(obs.summary), cut(freq, breaks=brks, include.lowest = T))
my_palette<-colorRampPalette(brewer.pal(9, "YlGnBu"))(length(levels(grps)))
points(obs.summary$long,obs.summary$lat, pch=19,cex=0.2, col=my_palette)
library(maps)
library(RColorBrewer)
library(mapproj)
obs.summary<-read.csv("../DataProducts/UFO_aggregate_sightings.txt")
map('usa')
map("state", col="black",fill=F, add=T, lty=1, lwd=0.5)
map.grid(nx = 5, ny=5 ,labels = F)
map.axes()
map.cities(us.cities,minpop = 500000, cex=1, pch=19, col="blue",label = T, cex.lab=0.75)
brks <- with(obs.summary, seq(min(freq), max(freq), length.out = 11))
grps<-with(obs.summary, cut(freq, breaks=brks, include.lowest = T))
tmp$col<-with(obs.summary), cut(freq, breaks=brks, include.lowest = T))
my_palette<-colorRampPalette(brewer.pal(9, "YlGnBu"))(length(levels(grps)))
points(obs.summary$long,obs.summary$lat, pch=19,cex=0.2, col=my_palette)
obs.summary<-read.csv("../DataProducts/UFO_aggregate_sightings.txt")
map('usa')
map("state", col="black",fill=F, add=T, lty=1, lwd=0.5)
map.grid(nx = 5, ny=5 ,labels = F)
map.axes()
map.cities(us.cities,minpop = 500000, cex=1, pch=19, col="blue",label = T, cex.lab=0.75)
brks <- with(obs.summary, seq(min(freq), max(freq), length.out = 11))
grps<-with(obs.summary, cut(freq, breaks=brks, include.lowest = T))
my_palette<-colorRampPalette(brewer.pal(9, "YlGnBu"))(length(levels(grps)))
points(obs.summary$long,obs.summary$lat, pch=19,cex=0.2, col=my_palette)
brks <- with(obs.summary, seq(min(locale), max(locale), length.out = 11))
grps<-with(obs.summary, cut(freq, breaks=brks, include.lowest = T))
grps<-with(obs.summary, cut(locale, breaks=brks, include.lowest = T))
my_palette<-colorRampPalette(brewer.pal(9, "YlGnBu"))(length(levels(grps)))
points(obs.summary$long,obs.summary$lat, pch=19,cex=0.2, col=my_palette)
library(maps)
library(RColorBrewer)
library(mapproj)
obs.summary<-read.csv("../DataProducts/UFO_aggregate_sightings.txt")
map('usa')
map("state", col="black",fill=F, add=T, lty=1, lwd=0.5)
map.axes()
map.cities(us.cities,minpop = 500000, cex=1, pch=19, col="blue",label = T, cex.lab=0.75)
brks <- with(obs.summary, seq(min(locale), max(locale), length.out = 11))
grps<-with(obs.summary, cut(locale, breaks=brks, include.lowest = T))
my_palette<-colorRampPalette(brewer.pal(9, "YlGnBu"))(length(levels(grps)))
points(obs.summary$long,obs.summary$lat, pch=19,cex=0.2, col=my_palette)
legend("topright", bty="n", pch=19, col=my_palette, legend=levels(grps), cex=0.75)
slidify("index.Rmd")
library("ramnathv/slidifyLibraries")
library(devtools)
install_github("ramnathv/slidifyLibraries")
install_version("stringr", version="0.6.2")
slidify("index.Rmd")
library(stringr)
